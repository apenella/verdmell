/*
Sample System management

The package 'sample' is used by verdmell to manage the samples generated by monitoring checks

-SampleSystem
-CheckSamples
*/
package sample

 import (
  "errors"
  "sync"
  "verdmell/environment"
  "verdmell/utils"
 )

//
var env *environment.Environment
//#
//#
//# SampleSystem struct:
//# SampleSystem defines a map to store the maps
type SampleSystem struct{
  Samples map[string]*CheckSampleSync `json: "samples"`
}

type CheckSampleSync struct {
	Sample *CheckSample 
	mutex sync.RWMutex
}

//
//# NewSampleSystem: method prepare to system gather information
func NewSampleSystem(e *environment.Environment) (error, *SampleSystem) {
  e.Output.WriteChDebug("(SampleSystem::NewSampleSystem)")
	sys := &SampleSystem{
    Samples: make(map[string]*CheckSampleSync),
  }
  //var err error
	env = e

	return nil, sys
}

//#
//# Specific methods
//#----------------------------------------------------------------------------------------


//#
//# Common methods
//#
// AddSample method creaty a new entry to CheckSample or modify its value
func (sys *SampleSystem) AddSample(cs *CheckSample) error {
  var sam *CheckSampleSync
  var exist bool

  name := cs.GetCheck()
  env.Output.WriteChDebug("(SampleSystem::AddSample) '"+name+"'")
  
  //If now sample exist for this check, initialize the it
  if _, exist = sys.Samples[name]; !exist{
  	sam = new(CheckSampleSync)
  	sys.Samples[name] = sam
  }

  //write lock
  sam.mutex.Lock()
	defer sam.mutex.Unlock()
	sam.Sample = cs

  return nil
}
//
//# GetSample: method returns the CheckSample object for a CheckObject
func (sys *SampleSystem) GetSample(name string) (error,*CheckSample) {
  var sam *CheckSampleSync
  var exist bool

  // if no sample for the check, an error is thrown
  if sam, exist = sys.Samples[name]; !exist {
    return errors.New("(SampleSystem::GetSample) There is no sample for this check"),nil
  }

  //read lock
  sam.mutex.RLock()
  defer sam.mutex.RUnlock()

  return nil,sam.Sample
}
//
//# DeleteSample: method deletes the Sample for a CheckObject
func (sys *SampleSystem) DeleteSample(name string) error {
  var sam *CheckSampleSync
  var exist bool

  // if no sample for the check, an error is thrown
  if sam, exist = sys.Samples[name]; !exist {
    return errors.New("(SampleSystem::GetSample) There is no sample for this check")
  }

  sam.mutex.Lock()
  defer sam.mutex.Unlock()
  delete(sys.Samples,name)
  return nil
}

//
//# String: converts a SampleSystem object to string
func (sys *SampleSystem) String() string {
  return utils.ObjectToJsonString(sys)
}

//
//# Itoa: method transform a integer to status string
func Itoa(i int) string {
  switch(i){
  case 0:
    return "OK"
  case 1:
    return "WARN"
  case 2:
    return "ERROR"
  default:
    return "UNKNOWN"
  }
}

//#######################################################################################################