/*
Sample System management

The package 'sample' is used by verdmell to manage the samples generated by monitoring checks

-SampleSystem
-CheckSamples
*/
package sample

 import (
  "verdmell/environment"
 )

//
var env *environment.Environment
//#
//#
//# SampleSystem struct:
//# SampleSystem defines a map to store the maps
type SampleSystem struct{
  Samples map[string]*CheckSample
}
//
//# NewSampleSystem: method prepare to system gather information
func NewSampleSystem(e *environment.Environment) (error, *SampleSystem) {
  e.Output.WriteChDebug("(SampleSystem::NewSampleSystem)")
	sys := new(SampleSystem)
  //var err error
	env = e 

  return nil, sys
}

//#
//# Specific methods
//#----------------------------------------------------------------------------------------


// //#
// //# Common methods
// //#
// // AddSample method creaty a new entry to CheckSamplesMap or modify its value
// func (csm *CheckSamplesMap) AddSample(cs *CheckSample) error {
// 	message.WriteDebug("(CheckSamples::AddSample) "+cs.String())
//   name := cs.GetCheckObjectName()
//   message.WriteDebug("(CheckSamples::AddSample) "+name)
//   csm.Samples[name] = cs
//   return nil
// }
// // GetSameple method returns the CheckSample object for a CheckObject
// func (csm *CheckSamplesMap) GetSample(name string) (error,*CheckSample) {
//   return nil,csm.Samples[name]
// }
// // RemoveSample method deletes the Sample for a CheckObject
// func (csm *CheckSamplesMap) RemoveSample(name string) error {
//   delete(csm.Samples,name)
//   return nil
// }
// // String converts a CheckObject object to string
// func (csm *CheckSamplesMap) String() string {
//   str := "{"
//   for _,sample := range csm.Samples {
//     str += sample.String()
//   }
//   str += "}"
//   return str
// }


//#######################################################################################################
