/*
Sample System management

The package 'sample' is used by verdmell to manage the samples generated by monitoring checks

-SampleSystem
-CheckSamples
*/
package sample

 import (
  "sync"
  "verdmell/environment"
 )

//
var env *environment.Environment
//#
//#
//# SampleSystem struct:
//# SampleSystem defines a map to store the maps
type SampleSystem struct{
  Samples map[string]*CheckSampleSync
}

type CheckSampleSync struct {
	Sample *CheckSample
	mutex sync.RWMutex
}

//
//# NewSampleSystem: method prepare to system gather information
func NewSampleSystem(e *environment.Environment) (error, *SampleSystem) {
  e.Output.WriteChDebug("(SampleSystem::NewSampleSystem)")
	sys := &SampleSystem{
    Samples: make(map[string]*CheckSampleSync),
  }
  //var err error
	env = e

	return nil, sys
}

//#
//# Specific methods
//#----------------------------------------------------------------------------------------


//#
//# Common methods
//#
// AddSample method creaty a new entry to CheckSample or modify its value
func (sys *SampleSystem) AddSample(cs *CheckSample) error {
  name := cs.GetCheck()
  env.Output.WriteChDebug("(SampleSystem::AddSample) '"+name+"'")
  
  if _,exist := sys.Samples[name]; !exist{
  	css := new(CheckSampleSync)
  	sys.Samples[name] = css
  }

  sys.Samples[name].mutex.Lock()
	defer sys.Samples[name].mutex.Unlock()
	sys.Samples[name].Sample = cs

  return nil
}
//
//# GetSample: method returns the CheckSample object for a CheckObject
func (sys *SampleSystem) GetSample(name string) (error,*CheckSample) {
  sys.Samples[name].mutex.RLock()
  defer sys.Samples[name].mutex.RUnlock()  
  return nil,sys.Samples[name].Sample
}
//
//# DeleteSample: method deletes the Sample for a CheckObject
func (sys *SampleSystem) DeleteSample(name string) error {
  sys.Samples[name].mutex.Lock()
  defer sys.Samples[name].mutex.Unlock()
  delete(sys.Samples,name)
  return nil
}

//
//# String: converts a SampleSystem object to string
func (sys *SampleSystem) String() string {
  str := "{ samples: {"
  for _,sample := range sys.Samples {
    sample.mutex.RLock()
    str += sample.Sample.String()
    sample.mutex.RUnlock()
  }
  str += "} }"
  return str
}


//#######################################################################################################
